CMAKE_MINIMUM_REQUIRED(VERSION 2.8)

SET(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CMAKE_SOURCE_DIR}/cmake)

OPTION (BUILD_SHARED "Build shared libs" OFF)
OPTION (ZZIP_CONFIGURE_INSTALL "Install Package" ON)
OPTION (USE_MMAP "" OFF)
OPTION (LOWSTACK "" OFF)
OPTION (LARGEFILE_SOURCE "" OFF)
OPTION (ZZIP_EASY "" OFF)
OPTION (ZZIP_HARDEN "" OFF)
OPTION (ZZIP_ALLOW_MODULO_ENTRIES "" OFF)

INCLUDE(git_label_version)

if(POLICY CMP0028)
    cmake_policy(SET CMP0028 NEW)
endif()
if(POLICY CMP0048)
    cmake_policy(SET CMP0048 NEW)
endif()
if(POLICY CMP0054)
    cmake_policy(SET CMP0054 NEW)
endif()
if(POLICY CMP0056)
    cmake_policy(SET CMP0056 NEW)
endif()

IF(USE_MMAP)
  ADD_DEFINITIONS(-D_USE_MMAP)
ENDIF()
IF(LOWSTK)
  ADD_DEFINITIONS(-D_LOWSTK)
ENDIF()
IF(LARGEFILE_SOURCE)
  ADD_DEFINITIONS(-D_LARGEFILE_SOURCE)
ENDIF()
IF(ZZIP_EASY)
  ADD_DEFINITIONS(-DZZIP_EASY)
ENDIF()
IF(ZZIP_HARDEN)
  ADD_DEFINITIONS(-DZZIP_HARDEN)
ENDIF()
IF(ZZIP_ALLOW_MODULO_ENTRIES)
  ADD_DEFINITIONS(-DZZIP_ALLOW_MODULO_ENTRIES)
ENDIF()

IF(MSVC)
  set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} /wd4100 /wd4996 /wd4244 /wd4706 /wd4702 /wd4127 /wd4701")
ELSEIF(UNIX)
  set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fomit-frame-pointer -Wwrite-strings")
  set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wstrict-prototypes -Wpointer-arith")
  set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wsign-compare -Wmissing-declarations")
  set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wstrict-aliasing -Warray-bounds")
ENDIF()

IF (WIN32 AND CMAKE_SYSTEM_VERSION)
  SET(VER ${CMAKE_SYSTEM_VERSION})
  STRING(REPLACE "." "" ver ${VER})
  STRING(REGEX REPLACE "([0-9])" "0\\1" ver ${VER})

  MESSAGE(STATUS "_WIN32_WINNT=${VER}")

  ADD_DEFINITIONS(-DZZIP_EXPORTS)
ENDIF ()

PROJECT(zzip VERSION "${PROJECT_VERSION}" LANGUAGES C)

INCLUDE(gen_config_header)

ADD_SUBDIRECTORY("zzip")
ADD_SUBDIRECTORY("bins")
ADD_SUBDIRECTORY("test")
ADD_SUBDIRECTORY("zzipwrap")

ADD_CUSTOM_TARGET(uninstall "${CMAKE_COMMAND}" -P "${CMAKE_SOURCE_DIR}/cmake/make_uninstall.cmake")

